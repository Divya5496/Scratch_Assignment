import * as React from 'react';
import { SingleAction } from './singleAction';
import { Droppable } from 'react-beautiful-dnd';
import { Box, Button } from '@mui/material';
import PlayArrowIcon from '@mui/icons-material/PlayArrow';
import RefreshIcon from '@mui/icons-material/Refresh';
import AddBoxIcon from '@mui/icons-material/AddBox';
import DeleteIcon from '@mui/icons-material/Delete';
import DisabledByDefaultIcon from '@mui/icons-material/DisabledByDefault';
import { Sprites } from './spriteProps';
import Positions from './positons';
import Resize from './resize';
import Draggable1 from 'react-draggable';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import WallpaperIcon from '@mui/icons-material/Wallpaper';
import { WARN_MSG_POS, WARN_MSG_SIZE } from '../constant';

export const EventBody = (props) => {
    const {
        moves,
        setMoves,
        actions,
        setActions,
        setActions2, 
        actions2
    } = props;

    const ref = React.useRef();
    const ref2 = React.useRef();

    let r = '0%';
    let t = '0%';
    let scale = 1;
    let angle = 0;
    let r2 = '0%';
    let t2 = '0%';
    let scale2 = 1;
    let angle2 = 0;

    const [hello, setHello] = React.useState(false);
    const [hello2, setHello2] = React.useState(false);
    const [theme, setTheme] = React.useState(false);
    const [displayAddIcon, setDisplayAddIcon] = React.useState(true);
    const [sprite, setSprite]= React.useState(require('../assets/images/cat.png'));
    const [sprite2, setSprite2]= React.useState(null);

    const checkCollision = () => {
        const rect1 = ref.current.getBoundingClientRect();
        const rect2 = ref2.current.getBoundingClientRect();

        return !(
            rect1.top + rect1.height < rect2.top ||
            rect1.top > rect2.top + rect2.height ||
            rect1.left + rect1.width < rect2.left ||
            rect1.left > rect2.left + rect2.width
        );
    };

    const swapAnimations = () => {
        // Swap animations
        const tempR = r;
        const tempT = t;
        r = r2;
        t = t2;
        r2 = tempR;
        t2 = tempT;

        // Apply swapped transforms
        ref.current.style.transform = `scale(${scale})translate(${r}, ${t}) rotate(${angle}deg)`;
        ref2.current.style.transform = `scale(${scale2})translate(${r2}, ${t2}) rotate(${angle2}deg)`;
    };

    React.useEffect(() => {
        const interval = setInterval(() => {
            if (checkCollision()) {
                swapAnimations();
            }
        }, 100); // Check collision every 100ms

        return () => clearInterval(interval);
    }, [r, t, r2, t2]);

    // Other functions (transform, moveUp, moveDown, etc.) remain unchanged
    // ... (include the existing logic for moveUp, moveDown, etc.)

    const refresh = (msg) => {
        r = '0%';
        t = '0%';
        r2 = '0%';
        t2 = '0%';
        scale2 = 1;
        angle2 = 0;
        scale = 1;
        angle = 0;
        clearTimeouts();
        setHello(false);

        if (msg) {
            toast.warn(msg, {
                position: "top-center",
                autoClose: 2000,
                borderRadius: '20px',
                closeOnClick: true,
                pauseOnHover: true,
                draggable: true,
            });
        }
        ref.current.style.transform = `scale(${scale}) translate(${r}, ${t}) rotate(${angle})`;
        ref2.current.style.transform = `scale(${scale2}) translate(${r2}, ${t2}) rotate(${angle2})`;
    };

    const startActions = (action, idx, action1) => {
        switch (action) {
            // Include the existing cases
            case 'move x by 50': {
                moveRight(idx, action1);
                break;
            }
            case 'move x by -50': {
                moveLeft(idx, action1);
                break;
            }
            case 'move y by 50': {
                moveUp(idx, action1);
                break;
            }
            case 'move y by -50': {
                moveDown(idx, action1);
                break;
            }
            // Other existing cases
            default: break;
        }
    };

    // The rest of the component remains unchanged
    return (
        <div className='mainContainer'>
            <ToastContainer />
            <div className="container">
                <Droppable droppableId="MovesList">
                    {(provided) => (
                        <div 
                            className="moves" 
                            ref={provided.innerRef} 
                            {...provided.droppableProps}
                        >
                            <div className='moves__heading'>Moves</div>
                            {moves?.map((move, index) => (
                                <SingleAction
                                    disableDelete={true}
                                    index={index}
                                    moves={moves}
                                    move={move}
                                    key={move.id}
                                    setMoves={setMoves}
                                />
                            ))}
                            {provided.placeholder}
                        </div>
                    )}
                </Droppable>

                <Droppable droppableId="MovesActions">
                    {(provided) => (
                        <div 
                            className="moves actions"
                            ref={provided.innerRef} 
                            {...provided.droppableProps}
                        >
                            <span className='moves__heading'>Action</span>
                            {actions?.map((move, index) => (
                                <SingleAction
                                    index={index}
                                    moves={actions}
                                    move={move}
                                    key={move.id}
                                    refresh={refresh}
                                    setMoves={setActions}
                                />
                            ))}
                            {provided.placeholder}
                        </div>
                    )}
                </Droppable>

                {displayAddIcon && 
                <div style={{display:'flex', flexDirection:'column' ,justifyContent:'center', alignItems:'center'}}>
                    <div className="icon">
                        <AddBoxIcon sx={{color:'gray', cursor:'pointer'}} onClick={() => {
                            setDisplayAddIcon(!displayAddIcon);
                            setSprite2(require('../assets/images/jerry1.png'));
                            refresh();
                        }}/>
                        <span className="tooltiptext">add sprite</span>
                    </div>
                    <div>
                        <DeleteIcon onClick={() => {setActions([])}} sx={{cursor:'pointer', fontSize:'30px', color:'Grey'}}/>
                    </div>
                </div>
                }

                {!displayAddIcon && (
                    <Droppable droppableId="MovesActions2">
                        {(provided) => (
                            <div 
                                className="moves actions"
                                ref={provided.innerRef} 
                                {...provided.droppableProps}
                            >
                                <span className='moves__heading'>Action 2</span>
                                {actions2?.map((move, index) => (
                                    <SingleAction
                                        index={index}
                                        moves={actions2}
                                        move={move}
                                        key={move.id}
                                        refresh={refresh}
                                        setMoves={setActions2}
                                    />
                                ))}
                                {provided.placeholder}
                            </div>
                        )}
                    </Droppable>
                )}
                {!displayAddIcon && (
                    <div className="icon">
                        <DisabledByDefaultIcon sx={{color:'gray', cursor:'pointer'}} onClick={() => {
                            setDisplayAddIcon(!displayAddIcon);
                            setSprite2(null);
                            refresh();
                        }}/>
                        <div>
                            <DeleteIcon onClick={() => {setActions([]); setActions2([])}} sx={{cursor:'pointer', fontSize:'30px', color:'Grey'}}/>
                        </div>
                    </div>
                )}

                <div className="moves play" 
                    style={{
                        background: theme ? 'url("https://www.hp.com/us-en/shop/app/assets/images/uploads/prod/misty-forest-background1595620320482968.jpg?impolicy=prdimg&imdensity=1&imwidth=1000")' : null, 
                        backgroundSize: theme ? '100% 100%' : null
                    }}
                >
                    <Draggable1 bounds={{ left: -540, top: -250, right: 540, bottom: 250 }}>
                        <div style={{ display: 'flex', flexDirection: "row" }}> 
                            <div ref={ref} style={{
                                position: 'relative',
                                transition: '1s all ease'
                            }}>
                                {hello ? (
                                    <div style={{ transition: "0s all ease" }} className='msgPopup'>
                                        hello!
                                    </div>
                                ) : null}
                                <img src={sprite} alt='sprite'
                                    draggable='false'
                                    style={{
                                        cursor: "pointer",
                                        position: 'relative',
                                        height: 200, 
                                        width: 200,
                                        transition: '1s all ease'
                                    }}
                                />
                            </div>
                            {!displayAddIcon && (
                                <div ref={ref2} style={{
                                    position: 'relative',
                                    transition: '1s all ease'
                                }}>
                                    {hello2 ? (
                                        <div style={{ transition: "0s all ease" }} className='msgPopup'>
                                            hello 2!
                                        </div>
                                    ) : null}
                                    <img src={sprite2} alt='sprite2'
                                        draggable='false'
                                        style={{
                                            cursor: "pointer",
                                            position: 'relative',
                                            height: 200, 
                                            width: 200,
                                            transition: '1s all ease'
                                        }}
                                    />
                                </div>
                            )}
                        </div>
                    </Draggable1>

                    <div style={{marginTop:'20px'}}>
                        <Button variant="contained" color="primary" 
                            onClick={() => {
                                moves.forEach((action, idx) => {
                                    startActions(action.action, idx, action);
                                });
                            }}>
                            <PlayArrowIcon />
                        </Button>
                        <Button variant="contained" color="secondary" 
                            onClick={() => refresh()}>
                            <RefreshIcon />
                        </Button>
                    </div>
                </div>
            </div>
        </div>
    );
};
